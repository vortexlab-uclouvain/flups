#ifndef LGF_3UNB0SPE_HPP_
#define LGF_3UNB0SPE_HPP_

#include <math.h>
void lgf_2_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  const double n3_18 = pow(n3, 18);
  const double n3_20 = pow(n3, 20);
  G[0] = (0.0625 * n1_4 + 0.0625 * n2_4 + 0.0625 * n3_4 + -0.1875 * (n1 * n1) * (n2 * n2) + -0.1875 * (n1 * n1) * (n3 * n3) + -0.1875 * (n2 * n2) * (n3 * n3)) / (M_PI * pow(n, 7)) + (0.1796875 * n1_8 + 0.1796875 * n2_8 + 0.1796875 * n3_8 + 4.8515625 * n1_4 * n2_4 + -1.90625 * n1_6 * (n2 * n2) + -1.90625 * (n1 * n1) * n2_6 + -1.90625 * n1_6 * (n3 * n3) + -1.90625 * n2_6 * (n3 * n3) + -1.90625 * (n1 * n1) * n3_6 + -1.90625 * (n2 * n2) * n3_6 + 4.8515625 * n1_4 * n3_4 + 4.8515625 * n2_4 * n3_4 + -1.78125 * n1_4 * (n2 * n2) * (n3 * n3) + -1.78125 * (n1 * n1) * n2_4 * (n3 * n3) + -1.78125 * (n1 * n1) * (n2 * n2) * n3_4) / (M_PI * pow(n, 13)) + (1.263671875 * n1_12 + 1.263671875 * n2_12 + 1.263671875 * n3_12 + -32.068359375 * (n1 * n1) * n2_10 + -348.087890625 * n1_6 * n2_6 + 208.078125 * n1_4 * n2_8 + -348.087890625 * n1_6 * n3_6 + -32.068359375 * (n1 * n1) * n3_10 + 208.078125 * n1_8 * n2_4 + 208.078125 * n1_8 * n3_4 + -32.068359375 * n1_10 * (n2 * n2) + 208.078125 * n1_4 * n3_8 + -32.068359375 * n1_10 * (n3 * n3) + 208.078125 * n2_4 * n3_8 + 208.078125 * n2_8 * n3_4 + -348.087890625 * n2_6 * n3_6 + -32.068359375 * n2_10 * (n3 * n3) + -32.068359375 * (n2 * n2) * n3_10 + -145.447265625 * n1_6 * n2_4 * (n3 * n3) + -30.708984375 * n1_8 * (n2 * n2) * (n3 * n3) + -145.447265625 * n1_4 * (n2 * n2) * n3_6 + -145.447265625 * n1_6 * (n2 * n2) * n3_4 + 1224.287109375 * n1_4 * n2_4 * n3_4 + -145.447265625 * n1_4 * n2_6 * (n3 * n3) + -30.708984375 * (n1 * n1) * (n2 * n2) * n3_8 + -145.447265625 * (n1 * n1) * n2_6 * n3_4 + -145.447265625 * (n1 * n1) * n2_4 * n3_6 + -30.708984375 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (17.6351318359375 * n1_16 + 17.6351318359375 * n2_16 + 17.6351318359375 * n3_16 + -38587.1455078125 * n1_10 * n2_6 + -817.4765625 * (n1 * n1) * n2_14 + 59374.79406738281 * n1_8 * n2_8 + 10319.976806640625 * n1_4 * n2_12 + 10319.976806640625 * n1_12 * n3_4 + 59374.79406738281 * n2_8 * n3_8 + -38587.1455078125 * n1_6 * n3_10 + 59374.79406738281 * n1_8 * n3_8 + -817.4765625 * n1_14 * (n3 * n3) + 10319.976806640625 * n1_12 * n2_4 + -38587.1455078125 * n2_10 * n3_6 + -38587.1455078125 * n2_6 * n3_10 + -817.4765625 * (n1 * n1) * n3_14 + 10319.976806640625 * n1_4 * n3_12 + 10319.976806640625 * n2_4 * n3_12 + -817.4765625 * (n2 * n2) * n3_14 + -38587.1455078125 * n1_6 * n2_10 + -38587.1455078125 * n1_10 * n3_6 + -817.4765625 * n1_14 * (n2 * n2) + 10319.976806640625 * n2_12 * n3_4 + -817.4765625 * n2_14 * (n3 * n3) + -10707.0205078125 * (n1 * n1) * n2_8 * n3_6 + -1029.375 * (n1 * n1) * n2_12 * (n3 * n3) + -1029.375 * n1_12 * (n2 * n2) * (n3 * n3) + -7662.298828125 * (n1 * n1) * n2_4 * n3_10 + 176752.265625 * n1_4 * n2_8 * n3_4 + -10707.0205078125 * n1_8 * (n2 * n2) * n3_6 + -10707.0205078125 * n1_8 * n2_6 * (n3 * n3) + -1029.375 * (n1 * n1) * (n2 * n2) * n3_12 + -7662.298828125 * n1_10 * n2_4 * (n3 * n3) + -7662.298828125 * (n1 * n1) * n2_10 * n3_4 + -145606.125 * n1_6 * n2_4 * n3_6 + -10707.0205078125 * n1_6 * n2_8 * (n3 * n3) + -10707.0205078125 * n1_6 * (n2 * n2) * n3_8 + -7662.298828125 * n1_4 * n2_10 * (n3 * n3) + 176752.265625 * n1_4 * n2_4 * n3_8 + 176752.265625 * n1_8 * n2_4 * n3_4 + -145606.125 * n1_6 * n2_6 * n3_4 + -145606.125 * n1_4 * n2_6 * n3_6 + -7662.298828125 * n1_4 * (n2 * n2) * n3_10 + -7662.298828125 * n1_10 * (n2 * n2) * n3_4 + -10707.0205078125 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + (411.7810974121094 * n1_20 + 411.7810974121094 * n2_20 + 411.7810974121094 * n3_20 + 636098.5509338379 * n1_4 * n2_16 + 636098.5509338379 * n1_16 * n3_4 + 636098.5509338379 * n2_16 * n3_4 + -4.233311824890137e6 * n1_6 * n2_14 + -1.7359390852020264e7 * n1_10 * n3_10 + 636098.5509338379 * n2_4 * n3_16 + -4.233311824890137e6 * n1_14 * n2_6 + -30346.40737915039 * n1_18 * (n2 * n2) + -1.7359390852020264e7 * n2_10 * n3_10 + 1.2334053137298584e7 * n2_12 * n3_8 + 1.2334053137298584e7 * n1_8 * n3_12 + -30346.40737915039 * (n1 * n1) * n3_18 + -4.233311824890137e6 * n2_6 * n3_14 + -4.233311824890137e6 * n2_14 * n3_6 + 1.2334053137298584e7 * n1_12 * n2_8 + 1.2334053137298584e7 * n1_12 * n3_8 + 1.2334053137298584e7 * n2_8 * n3_12 + -30346.40737915039 * (n2 * n2) * n3_18 + -1.7359390852020264e7 * n1_10 * n2_10 + 636098.5509338379 * n1_16 * n2_4 + -30346.40737915039 * (n1 * n1) * n2_18 + -4.233311824890137e6 * n1_6 * n3_14 + 636098.5509338379 * n1_4 * n3_16 + -4.233311824890137e6 * n1_14 * n3_6 + 1.2334053137298584e7 * n1_8 * n2_12 + -30346.40737915039 * n1_18 * (n3 * n3) + -30346.40737915039 * n2_18 * (n3 * n3) + -23983.464569091797 * n1_10 * n2_8 * (n3 * n3) + -2.1705861493652344e7 * n1_8 * n2_6 * n3_6 + -304364.1762084961 * n1_14 * n2_4 * (n3 * n3) + -65864.93472290039 * (n1 * n1) * (n2 * n2) * n3_16 + -2.1705861493652344e7 * n1_6 * n2_6 * n3_8 + -2.1705861493652344e7 * n1_6 * n2_8 * n3_6 + -4.4560843252441406e7 * n1_10 * n2_6 * n3_4 + -65864.93472290039 * n1_16 * (n2 * n2) * (n3 * n3) + -304364.1762084961 * n1_4 * (n2 * n2) * n3_14 + -2.0695828358764648e6 * n1_6 * (n2 * n2) * n3_12 + -304364.1762084961 * (n1 * n1) * n2_4 * n3_14 + -304364.1762084961 * (n1 * n1) * n2_14 * n3_4 + 2.2283262220825195e7 * n1_4 * n2_4 * n3_12 + 2.2283262220825195e7 * n1_12 * n2_4 * n3_4 + -2.0695828358764648e6 * (n1 * n1) * n2_12 * n3_6 + -2.0695828358764648e6 * n1_12 * n2_6 * (n3 * n3) + -23983.464569091797 * n1_8 * n2_10 * (n3 * n3) + -23983.464569091797 * (n1 * n1) * n2_10 * n3_8 + -4.4560843252441406e7 * n1_4 * n2_10 * n3_6 + -2.0695828358764648e6 * n1_12 * (n2 * n2) * n3_6 + -23983.464569091797 * (n1 * n1) * n2_8 * n3_10 + -4.4560843252441406e7 * n1_6 * n2_10 * n3_4 + -304364.1762084961 * n1_14 * (n2 * n2) * n3_4 + 9.293289147317505e7 * n1_4 * n2_8 * n3_8 + -65864.93472290039 * (n1 * n1) * n2_16 * (n3 * n3) + 9.293289147317505e7 * n1_8 * n2_4 * n3_8 + -23983.464569091797 * n1_10 * (n2 * n2) * n3_8 + -4.4560843252441406e7 * n1_10 * n2_4 * n3_6 + -23983.464569091797 * n1_8 * (n2 * n2) * n3_10 + 9.293289147317505e7 * n1_8 * n2_8 * n3_4 + -4.4560843252441406e7 * n1_6 * n2_4 * n3_10 + -304364.1762084961 * n1_4 * n2_14 * (n3 * n3) + -4.4560843252441406e7 * n1_4 * n2_6 * n3_10 + 2.2283262220825195e7 * n1_4 * n2_12 * n3_4 + -2.0695828358764648e6 * (n1 * n1) * n2_6 * n3_12 + -2.0695828358764648e6 * n1_6 * n2_12 * (n3 * n3)) / (M_PI * pow(n, 31)) + 1 / (12.566370614359172 * n * 1);
}

void lgf_4_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  const double n3_18 = pow(n3, 18);
  const double n3_20 = pow(n3, 20);
  G[0] = (0.125 * n1_8 + 0.125 * n2_8 + 0.125 * n3_8 + -0.125 * n1_4 * n2_4 + 0.0625 * n1_6 * (n2 * n2) + 0.0625 * (n1 * n1) * n2_6 + 0.0625 * n1_6 * (n3 * n3) + 0.0625 * n2_6 * (n3 * n3) + 0.0625 * (n1 * n1) * n3_6 + 0.0625 * (n2 * n2) * n3_6 + -0.125 * n1_4 * n3_4 + -0.125 * n2_4 * n3_4 + -4.625 * n1_4 * (n2 * n2) * (n3 * n3) + -4.625 * (n1 * n1) * n2_4 * (n3 * n3) + -4.625 * (n1 * n1) * (n2 * n2) * n3_4) / (M_PI * pow(n, 13)) + (-0.390625 * n1_12 + -0.390625 * n2_12 + -0.390625 * n3_12 + 5.625 * (n1 * n1) * n2_10 + -27.03125 * n1_6 * n2_6 + -7.5 * n1_4 * n2_8 + -27.03125 * n1_6 * n3_6 + 5.625 * (n1 * n1) * n3_10 + -7.5 * n1_8 * n2_4 + -7.5 * n1_8 * n3_4 + 5.625 * n1_10 * (n2 * n2) + -7.5 * n1_4 * n3_8 + 5.625 * n1_10 * (n3 * n3) + -7.5 * n2_4 * n3_8 + -7.5 * n2_8 * n3_4 + -27.03125 * n2_6 * n3_6 + 5.625 * n2_10 * (n3 * n3) + 5.625 * (n2 * n2) * n3_10 + 7.5 * n1_6 * n2_4 * (n3 * n3) + 34.21875 * n1_8 * (n2 * n2) * (n3 * n3) + 7.5 * n1_4 * (n2 * n2) * n3_6 + 7.5 * n1_6 * (n2 * n2) * n3_4 + -3.515625 * n1_4 * n2_4 * n3_4 + 7.5 * n1_4 * n2_6 * (n3 * n3) + 34.21875 * (n1 * n1) * (n2 * n2) * n3_8 + 7.5 * (n1 * n1) * n2_6 * n3_4 + 7.5 * (n1 * n1) * n2_4 * n3_6 + 34.21875 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (5.0859375 * n1_16 + 5.0859375 * n2_16 + 5.0859375 * n3_16 + 484.23046875 * n1_10 * n2_6 + -17.96484375 * (n1 * n1) * n2_14 + 801.7734375 * n1_8 * n2_8 + 60.29296875 * n1_4 * n2_12 + 60.29296875 * n1_12 * n3_4 + 801.7734375 * n2_8 * n3_8 + 484.23046875 * n1_6 * n3_10 + 801.7734375 * n1_8 * n3_8 + -17.96484375 * n1_14 * (n3 * n3) + 60.29296875 * n1_12 * n2_4 + 484.23046875 * n2_10 * n3_6 + 484.23046875 * n2_6 * n3_10 + -17.96484375 * (n1 * n1) * n3_14 + 60.29296875 * n1_4 * n3_12 + 60.29296875 * n2_4 * n3_12 + -17.96484375 * (n2 * n2) * n3_14 + 484.23046875 * n1_6 * n2_10 + 484.23046875 * n1_10 * n3_6 + -17.96484375 * n1_14 * (n2 * n2) + 60.29296875 * n2_12 * n3_4 + -17.96484375 * n2_14 * (n3 * n3) + -5872.2890625 * (n1 * n1) * n2_8 * n3_6 + -1990.8984375 * (n1 * n1) * n2_12 * (n3 * n3) + -1990.8984375 * n1_12 * (n2 * n2) * (n3 * n3) + -5233.67578125 * (n1 * n1) * n2_4 * n3_10 + 13045.4296875 * n1_4 * n2_8 * n3_4 + -5872.2890625 * n1_8 * (n2 * n2) * n3_6 + -5872.2890625 * n1_8 * n2_6 * (n3 * n3) + -1990.8984375 * (n1 * n1) * (n2 * n2) * n3_12 + -5233.67578125 * n1_10 * n2_4 * (n3 * n3) + -5233.67578125 * (n1 * n1) * n2_10 * n3_4 + 36678.796875 * n1_6 * n2_4 * n3_6 + -5872.2890625 * n1_6 * n2_8 * (n3 * n3) + -5872.2890625 * n1_6 * (n2 * n2) * n3_8 + -5233.67578125 * n1_4 * n2_10 * (n3 * n3) + 13045.4296875 * n1_4 * n2_4 * n3_8 + 13045.4296875 * n1_8 * n2_4 * n3_4 + 36678.796875 * n1_6 * n2_6 * n3_4 + 36678.796875 * n1_4 * n2_6 * n3_6 + -5233.67578125 * n1_4 * (n2 * n2) * n3_10 + -5233.67578125 * n1_10 * (n2 * n2) * n3_4 + -5872.2890625 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + (-153.369140625 * n1_20 + -153.369140625 * n2_20 + -153.369140625 * n3_20 + -24245.5029296875 * n1_4 * n2_16 + -24245.5029296875 * n2_16 * n3_4 + -67708.828125 * n1_6 * n2_14 + 123960.91796875 * n1_10 * n3_10 + 23167.9736328125 * n1_12 * n2_8 + -24245.5029296875 * n1_16 * n3_4 + -24245.5029296875 * n2_4 * n3_16 + -67708.828125 * n1_14 * n2_6 + 4497.470703125 * n1_18 * (n2 * n2) + 123960.91796875 * n2_10 * n3_10 + 23167.9736328125 * n2_12 * n3_8 + 23167.9736328125 * n1_8 * n3_12 + 4497.470703125 * (n1 * n1) * n3_18 + -67708.828125 * n2_14 * n3_6 + 23167.9736328125 * n1_12 * n3_8 + 23167.9736328125 * n2_8 * n3_12 + -67708.828125 * n2_6 * n3_14 + 4497.470703125 * (n2 * n2) * n3_18 + 123960.91796875 * n1_10 * n2_10 + -24245.5029296875 * n1_16 * n2_4 + 4497.470703125 * (n1 * n1) * n2_18 + -67708.828125 * n1_6 * n3_14 + -24245.5029296875 * n1_4 * n3_16 + 23167.9736328125 * n1_8 * n2_12 + -67708.828125 * n1_14 * n3_6 + 4497.470703125 * n1_18 * (n3 * n3) + 4497.470703125 * n2_18 * (n3 * n3) + 1.715054716796875e6 * n1_10 * n2_8 * (n3 * n3) + -926046.50390625 * n1_8 * n2_6 * n3_6 + -119840.15625 * n1_14 * n2_4 * (n3 * n3) + 99342.2265625 * (n1 * n1) * (n2 * n2) * n3_16 + -926046.50390625 * n1_6 * n2_6 * n3_8 + -926046.50390625 * n1_6 * n2_8 * n3_6 + -1.435647109375e6 * n1_10 * n2_6 * n3_4 + 99342.2265625 * n1_16 * (n2 * n2) * (n3 * n3) + -119840.15625 * n1_4 * (n2 * n2) * n3_14 + 153645.1953125 * n1_6 * (n2 * n2) * n3_12 + -119840.15625 * (n1 * n1) * n2_4 * n3_14 + -119840.15625 * (n1 * n1) * n2_14 * n3_4 + -1.775031796875e6 * n1_4 * n2_4 * n3_12 + -1.775031796875e6 * n1_12 * n2_4 * n3_4 + 153645.1953125 * (n1 * n1) * n2_12 * n3_6 + 153645.1953125 * n1_12 * n2_6 * (n3 * n3) + 1.715054716796875e6 * n1_8 * n2_10 * (n3 * n3) + 1.715054716796875e6 * (n1 * n1) * n2_10 * n3_8 + -1.435647109375e6 * n1_4 * n2_10 * n3_6 + 153645.1953125 * n1_12 * (n2 * n2) * n3_6 + 1.715054716796875e6 * (n1 * n1) * n2_8 * n3_10 + -1.435647109375e6 * n1_6 * n2_10 * n3_4 + -119840.15625 * n1_14 * (n2 * n2) * n3_4 + 487580.068359375 * n1_4 * n2_8 * n3_8 + 99342.2265625 * (n1 * n1) * n2_16 * (n3 * n3) + 487580.068359375 * n1_8 * n2_4 * n3_8 + 1.715054716796875e6 * n1_10 * (n2 * n2) * n3_8 + -1.435647109375e6 * n1_10 * n2_4 * n3_6 + 1.715054716796875e6 * n1_8 * (n2 * n2) * n3_10 + 487580.068359375 * n1_8 * n2_8 * n3_4 + -1.435647109375e6 * n1_6 * n2_4 * n3_10 + -119840.15625 * n1_4 * n2_14 * (n3 * n3) + -1.435647109375e6 * n1_4 * n2_6 * n3_10 + -1.775031796875e6 * n1_4 * n2_12 * n3_4 + 153645.1953125 * (n1 * n1) * n2_6 * n3_12 + 153645.1953125 * n1_6 * n2_12 * (n3 * n3)) / (M_PI * pow(n, 31)) + 1 / (12.566370614359172 * n * 1);
}

void lgf_6_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  const double n3_18 = pow(n3, 18);
  const double n3_20 = pow(n3, 20);
  G[0] = (0.703125 * n1_12 + 0.703125 * n2_12 + 0.703125 * n3_12 + -10.125 * (n1 * n1) * n2_10 + 48.65625 * n1_6 * n2_6 + 13.5 * n1_4 * n2_8 + 48.65625 * n1_6 * n3_6 + -10.125 * (n1 * n1) * n3_10 + 13.5 * n1_8 * n2_4 + 13.5 * n1_8 * n3_4 + -10.125 * n1_10 * (n2 * n2) + 13.5 * n1_4 * n3_8 + -10.125 * n1_10 * (n3 * n3) + 13.5 * n2_4 * n3_8 + 13.5 * n2_8 * n3_4 + 48.65625 * n2_6 * n3_6 + -10.125 * n2_10 * (n3 * n3) + -10.125 * (n2 * n2) * n3_10 + -13.5 * n1_6 * n2_4 * (n3 * n3) + -61.59375 * n1_8 * (n2 * n2) * (n3 * n3) + -13.5 * n1_4 * (n2 * n2) * n3_6 + -13.5 * n1_6 * (n2 * n2) * n3_4 + 6.328125 * n1_4 * n2_4 * n3_4 + -13.5 * n1_4 * n2_6 * (n3 * n3) + -61.59375 * (n1 * n1) * (n2 * n2) * n3_8 + -13.5 * (n1 * n1) * n2_6 * n3_4 + -13.5 * (n1 * n1) * n2_4 * n3_6 + -61.59375 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (-6.890625 * n1_16 + -6.890625 * n2_16 + -6.890625 * n3_16 + -412.9453125 * n1_10 * n2_6 + 36.9140625 * (n1 * n1) * n2_14 + -753.046875 * n1_8 * n2_8 + 7.3828125 * n1_4 * n2_12 + 7.3828125 * n1_12 * n3_4 + -753.046875 * n2_8 * n3_8 + -412.9453125 * n1_6 * n3_10 + -753.046875 * n1_8 * n3_8 + 7.3828125 * n1_12 * n2_4 + 36.9140625 * n1_14 * (n3 * n3) + -412.9453125 * n2_10 * n3_6 + -412.9453125 * n2_6 * n3_10 + 36.9140625 * (n1 * n1) * n3_14 + 7.3828125 * n2_4 * n3_12 + 36.9140625 * (n2 * n2) * n3_14 + 7.3828125 * n2_12 * n3_4 + 7.3828125 * n1_4 * n3_12 + -412.9453125 * n1_6 * n2_10 + -412.9453125 * n1_10 * n3_6 + 36.9140625 * n1_14 * (n2 * n2) + 36.9140625 * n2_14 * (n3 * n3) + -575.859375 * (n1 * n1) * n2_8 * n3_6 + 2288.671875 * (n1 * n1) * n2_12 * (n3 * n3) + 2288.671875 * n1_12 * (n2 * n2) * (n3 * n3) + 3536.3671875 * (n1 * n1) * n2_4 * n3_10 + -5980.078125 * n1_4 * n2_8 * n3_4 + -575.859375 * n1_8 * (n2 * n2) * n3_6 + -575.859375 * n1_8 * n2_6 * (n3 * n3) + 2288.671875 * (n1 * n1) * (n2 * n2) * n3_12 + 3536.3671875 * n1_10 * n2_4 * (n3 * n3) + 3536.3671875 * (n1 * n1) * n2_10 * n3_4 + -19018.125 * n1_6 * n2_4 * n3_6 + -575.859375 * n1_6 * n2_8 * (n3 * n3) + -575.859375 * n1_6 * (n2 * n2) * n3_8 + 3536.3671875 * n1_4 * n2_10 * (n3 * n3) + -5980.078125 * n1_4 * n2_4 * n3_8 + -5980.078125 * n1_8 * n2_4 * n3_4 + -19018.125 * n1_6 * n2_6 * n3_4 + -19018.125 * n1_4 * n2_6 * n3_6 + 3536.3671875 * n1_4 * (n2 * n2) * n3_10 + 3536.3671875 * n1_10 * (n2 * n2) * n3_4 + -575.859375 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + (54.263671875 * n1_20 + 54.263671875 * n2_20 + 54.263671875 * n3_20 + 10520.6923828125 * n1_4 * n2_16 + 10520.6923828125 * n1_16 * n3_4 + 10520.6923828125 * n2_16 * n3_4 + 28077.57421875 * n1_6 * n2_14 + -59757.22265625 * n1_10 * n3_10 + 10520.6923828125 * n2_4 * n3_16 + 28077.57421875 * n1_14 * n2_6 + -1909.564453125 * n1_18 * (n2 * n2) + -14285.5576171875 * n1_12 * n2_8 + -59757.22265625 * n2_10 * n3_10 + -14285.5576171875 * n2_12 * n3_8 + -14285.5576171875 * n1_8 * n3_12 + -1909.564453125 * (n1 * n1) * n3_18 + 28077.57421875 * n2_14 * n3_6 + -14285.5576171875 * n1_12 * n3_8 + -14285.5576171875 * n2_8 * n3_12 + 28077.57421875 * n2_6 * n3_14 + -1909.564453125 * (n2 * n2) * n3_18 + -59757.22265625 * n1_10 * n2_10 + 10520.6923828125 * n1_16 * n2_4 + -1909.564453125 * (n1 * n1) * n2_18 + 28077.57421875 * n1_6 * n3_14 + 10520.6923828125 * n1_4 * n3_16 + -14285.5576171875 * n1_8 * n2_12 + 28077.57421875 * n1_14 * n3_6 + -1909.564453125 * n1_18 * (n3 * n3) + -1909.564453125 * n2_18 * (n3 * n3) + -378230.712890625 * n1_10 * n2_8 * (n3 * n3) + 1.07945947265625e6 * n1_8 * n2_6 * n3_6 + 6635.671875 * n1_14 * n2_4 * (n3 * n3) + -17757.140625 * (n1 * n1) * (n2 * n2) * n3_16 + 1.07945947265625e6 * n1_6 * n2_6 * n3_8 + 1.07945947265625e6 * n1_6 * n2_8 * n3_6 + 263385.52734375 * n1_10 * n2_6 * n3_4 + -17757.140625 * n1_16 * (n2 * n2) * (n3 * n3) + 6635.671875 * n1_4 * (n2 * n2) * n3_14 + -79312.81640625 * n1_6 * (n2 * n2) * n3_12 + 6635.671875 * (n1 * n1) * n2_4 * n3_14 + 6635.671875 * (n1 * n1) * n2_14 * n3_4 + 152620.453125 * n1_4 * n2_4 * n3_12 + 152620.453125 * n1_12 * n2_4 * n3_4 + -79312.81640625 * (n1 * n1) * n2_12 * n3_6 + -79312.81640625 * n1_12 * n2_6 * (n3 * n3) + -378230.712890625 * n1_8 * n2_10 * (n3 * n3) + -378230.712890625 * (n1 * n1) * n2_10 * n3_8 + 263385.52734375 * n1_4 * n2_10 * n3_6 + -79312.81640625 * n1_12 * (n2 * n2) * n3_6 + -378230.712890625 * (n1 * n1) * n2_8 * n3_10 + 263385.52734375 * n1_6 * n2_10 * n3_4 + 6635.671875 * n1_14 * (n2 * n2) * n3_4 + 213760.107421875 * n1_4 * n2_8 * n3_8 + -17757.140625 * (n1 * n1) * n2_16 * (n3 * n3) + 213760.107421875 * n1_8 * n2_4 * n3_8 + -378230.712890625 * n1_10 * (n2 * n2) * n3_8 + 263385.52734375 * n1_10 * n2_4 * n3_6 + -378230.712890625 * n1_8 * (n2 * n2) * n3_10 + 213760.107421875 * n1_8 * n2_8 * n3_4 + 263385.52734375 * n1_6 * n2_4 * n3_10 + 6635.671875 * n1_4 * n2_14 * (n3 * n3) + 263385.52734375 * n1_4 * n2_6 * n3_10 + 152620.453125 * n1_4 * n2_12 * n3_4 + -79312.81640625 * (n1 * n1) * n2_6 * n3_12 + -79312.81640625 * n1_6 * n2_12 * (n3 * n3)) / (M_PI * pow(n, 31)) + 1 / (12.566370614359172 * n * 1);
}

void lgf_8_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  const double n3_18 = pow(n3, 18);
  const double n3_20 = pow(n3, 20);
  G[0] = (7.875 * n1_16 + 7.875 * n2_16 + 7.875 * n3_16 + 471.9375 * n1_10 * n2_6 + -42.1875 * (n1 * n1) * n2_14 + 860.625 * n1_8 * n2_8 + -8.4375 * n1_4 * n2_12 + -8.4375 * n1_12 * n3_4 + 860.625 * n2_8 * n3_8 + 471.9375 * n1_6 * n3_10 + 860.625 * n1_8 * n3_8 + -8.4375 * n1_12 * n2_4 + -42.1875 * n1_14 * (n3 * n3) + 471.9375 * n2_10 * n3_6 + 471.9375 * n2_6 * n3_10 + -42.1875 * (n1 * n1) * n3_14 + -8.4375 * n2_4 * n3_12 + -42.1875 * (n2 * n2) * n3_14 + -8.4375 * n2_12 * n3_4 + -8.4375 * n1_4 * n3_12 + 471.9375 * n1_6 * n2_10 + 471.9375 * n1_10 * n3_6 + -42.1875 * n1_14 * (n2 * n2) + -42.1875 * n2_14 * (n3 * n3) + 658.125 * (n1 * n1) * n2_8 * n3_6 + -2615.625 * (n1 * n1) * n2_12 * (n3 * n3) + -2615.625 * n1_12 * (n2 * n2) * (n3 * n3) + -4041.5625 * (n1 * n1) * n2_4 * n3_10 + 6834.375 * n1_4 * n2_8 * n3_4 + 658.125 * n1_8 * (n2 * n2) * n3_6 + 658.125 * n1_8 * n2_6 * (n3 * n3) + -2615.625 * (n1 * n1) * (n2 * n2) * n3_12 + -4041.5625 * n1_10 * n2_4 * (n3 * n3) + -4041.5625 * (n1 * n1) * n2_10 * n3_4 + 21735.0 * n1_6 * n2_4 * n3_6 + 658.125 * n1_6 * n2_8 * (n3 * n3) + 658.125 * n1_6 * (n2 * n2) * n3_8 + -4041.5625 * n1_4 * n2_10 * (n3 * n3) + 6834.375 * n1_4 * n2_4 * n3_8 + 6834.375 * n1_8 * n2_4 * n3_4 + 21735.0 * n1_6 * n2_6 * n3_4 + 21735.0 * n1_4 * n2_6 * n3_6 + -4041.5625 * n1_4 * (n2 * n2) * n3_10 + -4041.5625 * n1_10 * (n2 * n2) * n3_4 + 658.125 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + (-177.1875 * n1_20 + -177.1875 * n2_20 + -177.1875 * n3_20 + -34353.28125 * n1_4 * n2_16 + -34353.28125 * n1_16 * n3_4 + -34353.28125 * n2_16 * n3_4 + -91681.875 * n1_6 * n2_14 + 195125.625 * n1_10 * n3_10 + -34353.28125 * n2_4 * n3_16 + -91681.875 * n1_14 * n2_6 + 6235.3125 * n1_18 * (n2 * n2) + 46646.71875 * n1_12 * n2_8 + 195125.625 * n2_10 * n3_10 + 46646.71875 * n2_12 * n3_8 + 46646.71875 * n1_8 * n3_12 + 6235.3125 * (n1 * n1) * n3_18 + -91681.875 * n2_14 * n3_6 + 46646.71875 * n1_12 * n3_8 + 46646.71875 * n2_8 * n3_12 + -91681.875 * n2_6 * n3_14 + 6235.3125 * (n2 * n2) * n3_18 + 195125.625 * n1_10 * n2_10 + -34353.28125 * n1_16 * n2_4 + 6235.3125 * (n1 * n1) * n2_18 + -91681.875 * n1_6 * n3_14 + -34353.28125 * n1_4 * n3_16 + 46646.71875 * n1_8 * n2_12 + -91681.875 * n1_14 * n3_6 + 6235.3125 * n1_18 * (n3 * n3) + 6235.3125 * n2_18 * (n3 * n3) + 1.2350390625e6 * n1_10 * n2_8 * (n3 * n3) + -3.524765625e6 * n1_8 * n2_6 * n3_6 + -21667.5 * n1_14 * n2_4 * (n3 * n3) + 57982.5 * (n1 * n1) * (n2 * n2) * n3_16 + -3.524765625e6 * n1_6 * n2_6 * n3_8 + -3.524765625e6 * n1_6 * n2_8 * n3_6 + -860034.375 * n1_10 * n2_6 * n3_4 + 57982.5 * n1_16 * (n2 * n2) * (n3 * n3) + -21667.5 * n1_4 * (n2 * n2) * n3_14 + 258980.625 * n1_6 * (n2 * n2) * n3_12 + -21667.5 * (n1 * n1) * n2_4 * n3_14 + -21667.5 * (n1 * n1) * n2_14 * n3_4 + -498352.5 * n1_4 * n2_4 * n3_12 + -498352.5 * n1_12 * n2_4 * n3_4 + 258980.625 * (n1 * n1) * n2_12 * n3_6 + 258980.625 * n1_12 * n2_6 * (n3 * n3) + 1.2350390625e6 * n1_8 * n2_10 * (n3 * n3) + 1.2350390625e6 * (n1 * n1) * n2_10 * n3_8 + -860034.375 * n1_4 * n2_10 * n3_6 + 258980.625 * n1_12 * (n2 * n2) * n3_6 + 1.2350390625e6 * (n1 * n1) * n2_8 * n3_10 + -860034.375 * n1_6 * n2_10 * n3_4 + -21667.5 * n1_14 * (n2 * n2) * n3_4 + -697992.1875 * n1_4 * n2_8 * n3_8 + 57982.5 * (n1 * n1) * n2_16 * (n3 * n3) + -697992.1875 * n1_8 * n2_4 * n3_8 + 1.2350390625e6 * n1_10 * (n2 * n2) * n3_8 + -860034.375 * n1_10 * n2_4 * n3_6 + 1.2350390625e6 * n1_8 * (n2 * n2) * n3_10 + -697992.1875 * n1_8 * n2_8 * n3_4 + -860034.375 * n1_6 * n2_4 * n3_10 + -21667.5 * n1_4 * n2_14 * (n3 * n3) + -860034.375 * n1_4 * n2_6 * n3_10 + -498352.5 * n1_4 * n2_12 * n3_4 + 258980.625 * (n1 * n1) * n2_6 * n3_12 + 258980.625 * n1_6 * n2_12 * (n3 * n3)) / (M_PI * pow(n, 31)) + 1 / (12.566370614359172 * n * 1);
}

void lgf_2_2unb0spe_expansion(double* G, const double n1, const double n2, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  G[0] = -0.15915494309189535 * (1.6169364357414509 + log(n)) + (0.041666666666666664 * n1_4 + 0.041666666666666664 * n2_4 + -0.25 * (n1 * n1) * (n2 * n2)) / (M_PI * pow(n, 6)) + (0.08958333333333333 * n1_8 + 0.08958333333333333 * n2_8 + -1.6083333333333334 * n1_6 * (n2 * n2) + -1.6083333333333334 * (n1 * n1) * n2_6 + 3.2708333333333335 * n1_4 * n2_4) / (M_PI * pow(n, 12)) + (0.470734126984127 * n1_12 + 0.470734126984127 * n2_12 + -205.45833333333334 * n1_6 * n2_6 + 123.72767857142857 * n1_8 * n2_4 + -21.961309523809526 * n1_10 * (n2 * n2) + 123.72767857142857 * n1_4 * n2_8 + -21.961309523809526 * (n1 * n1) * n2_10) / (M_PI * pow(n, 18)) + (5.658072916666667 * n1_16 + 5.658072916666667 * n2_16 + -488.91875 * (n1 * n1) * n2_14 + -20042.297916666666 * n1_6 * n2_10 + 29912.7984375 * n1_8 * n2_8 + -488.91875 * n1_14 * (n2 * n2) + 5573.392708333334 * n1_4 * n2_12 + 5573.392708333334 * n1_12 * n2_4 + -20042.297916666666 * n1_10 * n2_6) / (M_PI * pow(n, 24)) + (118.71472537878788 * n1_20 + 118.71472537878788 * n2_20 + -2.0251342556818181e6 * n1_14 * n2_6 + -7.875366552083333e6 * n1_10 * n2_10 + -16520.104640151516 * n1_18 * (n2 * n2) + 318040.3899147727 * n1_16 * n2_4 + 318040.3899147727 * n1_4 * n2_16 + -2.0251342556818181e6 * n1_6 * n2_14 + 5.661116592329546e6 * n1_12 * n2_8 + -16520.104640151516 * (n1 * n1) * n2_18 + 5.661116592329546e6 * n1_8 * n2_12) / (M_PI * pow(n, 30));
}

void lgf_4_2unb0spe_expansion(double* G, const double n1, const double n2, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  G[0] = -0.15915494309189535 * (1.6169364357414509 + log(n)) + (0.1 * n1_8 + 0.1 * n2_8 + -0.4 * n1_6 * (n2 * n2) + -0.4 * (n1 * n1) * n2_6 + -1.0 * n1_4 * n2_4) / (M_PI * pow(n, 12)) + (-0.17857142857142858 * n1_12 + -0.17857142857142858 * n2_12 + -15.0 * n1_6 * n2_6 + -2.6785714285714284 * n1_8 * n2_4 + 4.642857142857143 * n1_10 * (n2 * n2) + -2.6785714285714284 * n1_4 * n2_8 + 4.642857142857143 * (n1 * n1) * n2_10) / (M_PI * pow(n, 18)) + (3.3833333333333333 * n1_16 + 3.3833333333333333 * n2_16 + -81.2 * (n1 * n1) * n2_14 + 297.73333333333335 * n1_6 * n2_10 + 669.9 * n1_8 * n2_8 + -81.2 * n1_14 * (n2 * n2) + -121.8 * n1_4 * n2_12 + -121.8 * n1_12 * n2_4 + 297.73333333333335 * n1_10 * n2_6) / (M_PI * pow(n, 24)) + (-61.28787878787879 * n1_20 + -61.28787878787879 * n2_20 + -40695.15151515151 * n1_14 * n2_6 + 105170.0 * n1_10 * n2_10 + 3799.848484848485 * n1_18 * (n2 * n2) + -14525.227272727272 * n1_16 * n2_4 + -14525.227272727272 * n1_4 * n2_16 + -40695.15151515151 * n1_6 * n2_14 + 30276.21212121212 * n1_12 * n2_8 + 3799.848484848485 * (n1 * n1) * n2_18 + 30276.21212121212 * n1_8 * n2_12) / (M_PI * pow(n, 30));
}

void lgf_6_2unb0spe_expansion(double* G, const double n1, const double n2, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  G[0] = -0.15915494309189535 * (1.6169364357414509 + log(n)) + (0.32142857142857145 * n1_12 + 0.32142857142857145 * n2_12 + 27.0 * n1_6 * n2_6 + 4.821428571428571 * n1_8 * n2_4 + -8.357142857142858 * n1_10 * (n2 * n2) + 4.821428571428571 * n1_4 * n2_8 + -8.357142857142858 * (n1 * n1) * n2_10) / (M_PI * pow(n, 18)) + (-3.5 * n1_16 + -3.5 * n2_16 + 84.0 * (n1 * n1) * n2_14 + -308.0 * n1_6 * n2_10 + -693.0 * n1_8 * n2_8 + 84.0 * n1_14 * (n2 * n2) + 126.0 * n1_4 * n2_12 + 126.0 * n1_12 * n2_4 + -308.0 * n1_10 * n2_6) / (M_PI * pow(n, 24)) + (20.045454545454547 * n1_20 + 20.045454545454547 * n2_20 + 13310.181818181818 * n1_14 * n2_6 + -34398.0 * n1_10 * n2_10 + -1242.8181818181818 * n1_18 * (n2 * n2) + 4750.772727272727 * n1_16 * n2_4 + 4750.772727272727 * n1_4 * n2_16 + 13310.181818181818 * n1_6 * n2_14 + -9902.454545454546 * n1_12 * n2_8 + -1242.8181818181818 * (n1 * n1) * n2_18 + -9902.454545454546 * n1_8 * n2_12) / (M_PI * pow(n, 30));
}

void lgf_8_2unb0spe_expansion(double* G, const double n1, const double n2, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  G[0] = -0.15915494309189535 * (1.6169364357414509 + log(n)) + (4.0 * n1_16 + 4.0 * n2_16 + -96.0 * (n1 * n1) * n2_14 + 352.0 * n1_6 * n2_10 + 792.0 * n1_8 * n2_8 + -96.0 * n1_14 * (n2 * n2) + -144.0 * n1_4 * n2_12 + -144.0 * n1_12 * n2_4 + 352.0 * n1_10 * n2_6) / (M_PI * pow(n, 24)) + (-65.45454545454545 * n1_20 + -65.45454545454545 * n2_20 + -43461.818181818184 * n1_14 * n2_6 + 112320.0 * n1_10 * n2_10 + 4058.181818181818 * n1_18 * (n2 * n2) + -15512.727272727272 * n1_16 * n2_4 + -15512.727272727272 * n1_4 * n2_16 + -43461.818181818184 * n1_6 * n2_14 + 32334.545454545456 * n1_12 * n2_8 + 4058.181818181818 * (n1 * n1) * n2_18 + 32334.545454545456 * n1_8 * n2_12) / (M_PI * pow(n, 30));
}

void mehr_4l_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  G[0] = (-0.020833333333333332 * n1_8 + -0.020833333333333332 * n2_8 + -0.020833333333333332 * n3_8 + 0.4583333333333333 * n1_4 * n2_4 + 0.20833333333333334 * n1_6 * (n2 * n2) + 0.20833333333333334 * (n1 * n1) * n2_6 + 0.20833333333333334 * n1_6 * (n3 * n3) + 0.20833333333333334 * n2_6 * (n3 * n3) + 0.20833333333333334 * (n1 * n1) * n3_6 + 0.20833333333333334 * (n2 * n2) * n3_6 + 0.4583333333333333 * n1_4 * n3_4 + 0.4583333333333333 * n2_4 * n3_4 + -2.7291666666666665 * n1_4 * (n2 * n2) * (n3 * n3) + -2.7291666666666665 * (n1 * n1) * n2_4 * (n3 * n3) + -2.7291666666666665 * (n1 * n1) * (n2 * n2) * n3_4) / (M_PI * pow(n, 13)) + (0.013020833333333334 * n1_12 + 0.013020833333333334 * n2_12 + 0.013020833333333334 * n3_12 + -0.703125 * (n1 * n1) * n2_10 + 6.744791666666667 * n1_6 * n2_6 + 2.65625 * n1_4 * n2_8 + 6.744791666666667 * n1_6 * n3_6 + -0.703125 * (n1 * n1) * n3_10 + 2.65625 * n1_8 * n2_4 + 2.65625 * n1_8 * n3_4 + -0.703125 * n1_10 * (n2 * n2) + 2.65625 * n1_4 * n3_8 + -0.703125 * n1_10 * (n3 * n3) + 2.65625 * n2_4 * n3_8 + 2.65625 * n2_8 * n3_4 + 6.744791666666667 * n2_6 * n3_6 + -0.703125 * n2_10 * (n3 * n3) + -0.703125 * (n2 * n2) * n3_10 + -10.390625 * n1_6 * n2_4 * (n3 * n3) + -8.359375 * n1_8 * (n2 * n2) * (n3 * n3) + -10.390625 * n1_4 * (n2 * n2) * n3_6 + -10.390625 * n1_6 * (n2 * n2) * n3_4 + -20.5078125 * n1_4 * n2_4 * n3_4 + -10.390625 * n1_4 * n2_6 * (n3 * n3) + -8.359375 * (n1 * n1) * (n2 * n2) * n3_8 + -10.390625 * (n1 * n1) * n2_6 * n3_4 + -10.390625 * (n1 * n1) * n2_4 * n3_6 + -8.359375 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (1.06640625 * n1_16 + 1.06640625 * n2_16 + 1.06640625 * n3_16 + 155.3671875 * n1_10 * n2_6 + -25.7578125 * (n1 * n1) * n2_14 + 303.84375 * n1_8 * n2_8 + -23.37890625 * n1_4 * n2_12 + -23.37890625 * n1_12 * n3_4 + 303.84375 * n2_8 * n3_8 + 155.3671875 * n1_6 * n3_10 + 303.84375 * n1_8 * n3_8 + -23.37890625 * n1_12 * n2_4 + -25.7578125 * n1_14 * (n3 * n3) + 155.3671875 * n2_10 * n3_6 + 155.3671875 * n2_6 * n3_10 + -25.7578125 * (n1 * n1) * n3_14 + -23.37890625 * n2_4 * n3_12 + -25.7578125 * (n2 * n2) * n3_14 + -23.37890625 * n2_12 * n3_4 + -23.37890625 * n1_4 * n3_12 + 155.3671875 * n1_6 * n2_10 + 155.3671875 * n1_10 * n3_6 + -25.7578125 * n1_14 * (n2 * n2) + -25.7578125 * n2_14 * (n3 * n3) + -5914.9453125 * (n1 * n1) * n2_8 * n3_6 + 810.46875 * (n1 * n1) * n2_12 * (n3 * n3) + 810.46875 * n1_12 * (n2 * n2) * (n3 * n3) + -560.765625 * (n1 * n1) * n2_4 * n3_10 + 4864.86328125 * n1_4 * n2_8 * n3_4 + -5914.9453125 * n1_8 * (n2 * n2) * n3_6 + -5914.9453125 * n1_8 * n2_6 * (n3 * n3) + 810.46875 * (n1 * n1) * (n2 * n2) * n3_12 + -560.765625 * n1_10 * n2_4 * (n3 * n3) + -560.765625 * (n1 * n1) * n2_10 * n3_4 + 10804.5 * n1_6 * n2_4 * n3_6 + -5914.9453125 * n1_6 * n2_8 * (n3 * n3) + -5914.9453125 * n1_6 * (n2 * n2) * n3_8 + -560.765625 * n1_4 * n2_10 * (n3 * n3) + 4864.86328125 * n1_4 * n2_4 * n3_8 + 4864.86328125 * n1_8 * n2_4 * n3_4 + 10804.5 * n1_6 * n2_6 * n3_4 + 10804.5 * n1_4 * n2_6 * n3_6 + -560.765625 * n1_4 * (n2 * n2) * n3_10 + -560.765625 * n1_10 * (n2 * n2) * n3_4 + -5914.9453125 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + 1 / (12.566370614359172 * n * 1);
}

void mehr_6l_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  G[0] = (0.029166666666666667 * n1_8 + 0.029166666666666667 * n2_8 + 0.029166666666666667 * n3_8 + -0.11666666666666667 * n1_4 * n2_4 + -0.029166666666666667 * n1_6 * (n2 * n2) + -0.029166666666666667 * (n1 * n1) * n2_6 + -0.029166666666666667 * n1_6 * (n3 * n3) + -0.029166666666666667 * n2_6 * (n3 * n3) + -0.029166666666666667 * (n1 * n1) * n3_6 + -0.029166666666666667 * (n2 * n2) * n3_6 + -0.11666666666666667 * n1_4 * n3_4 + -0.11666666666666667 * n2_4 * n3_4 + -0.37916666666666665 * n1_4 * (n2 * n2) * (n3 * n3) + -0.37916666666666665 * (n1 * n1) * n2_4 * (n3 * n3) + -0.37916666666666665 * (n1 * n1) * (n2 * n2) * n3_4) / (M_PI * pow(n, 13)) + (0.07552083333333333 * n1_12 + 0.07552083333333333 * n2_12 + 0.07552083333333333 * n3_12 + -0.984375 * (n1 * n1) * n2_10 + 4.057291666666667 * n1_6 * n2_6 + 0.96875 * n1_4 * n2_8 + 4.057291666666667 * n1_6 * n3_6 + -0.984375 * (n1 * n1) * n3_10 + 0.96875 * n1_8 * n2_4 + 0.96875 * n1_8 * n3_4 + -0.984375 * n1_10 * (n2 * n2) + 0.96875 * n1_4 * n3_8 + 0.96875 * n2_4 * n3_8 + 0.96875 * n2_8 * n3_4 + -0.984375 * n1_10 * (n3 * n3) + 4.057291666666667 * n2_6 * n3_6 + -0.984375 * n2_10 * (n3 * n3) + -0.984375 * (n2 * n2) * n3_10 + 0.578125 * n1_6 * n2_4 * (n3 * n3) + -5.171875 * n1_8 * (n2 * n2) * (n3 * n3) + 0.578125 * n1_4 * (n2 * n2) * n3_6 + 0.578125 * n1_6 * (n2 * n2) * n3_4 + 4.8046875 * n1_4 * n2_4 * n3_4 + 0.578125 * n1_4 * n2_6 * (n3 * n3) + -5.171875 * (n1 * n1) * (n2 * n2) * n3_8 + 0.578125 * (n1 * n1) * n2_6 * n3_4 + 0.578125 * (n1 * n1) * n2_4 * n3_6 + -5.171875 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (0.41015625 * n1_16 + 0.41015625 * n2_16 + 0.41015625 * n3_16 + 22.06640625 * n1_10 * n2_6 + -3.03515625 * (n1 * n1) * n2_14 + 43.1484375 * n1_8 * n2_8 + -2.953125 * n1_4 * n2_12 + -2.953125 * n1_12 * n3_4 + 43.1484375 * n2_8 * n3_8 + 22.06640625 * n1_6 * n3_10 + 43.1484375 * n1_8 * n3_8 + -2.953125 * n1_12 * n2_4 + -3.03515625 * n1_14 * (n3 * n3) + 22.06640625 * n2_10 * n3_6 + 22.06640625 * n2_6 * n3_10 + -3.03515625 * (n1 * n1) * n3_14 + -2.953125 * n2_4 * n3_12 + -3.03515625 * (n2 * n2) * n3_14 + -2.953125 * n2_12 * n3_4 + -2.953125 * n1_4 * n3_12 + 22.06640625 * n1_6 * n2_10 + 22.06640625 * n1_10 * n3_6 + -3.03515625 * n1_14 * (n2 * n2) + -3.03515625 * n2_14 * (n3 * n3) + 42.65625 * (n1 * n1) * n2_8 * n3_6 + -94.3359375 * (n1 * n1) * n2_12 * (n3 * n3) + -94.3359375 * n1_12 * (n2 * n2) * (n3 * n3) + -135.92578125 * (n1 * n1) * n2_4 * n3_10 + 221.89453125 * n1_4 * n2_8 * n3_4 + 42.65625 * n1_8 * (n2 * n2) * n3_6 + 42.65625 * n1_8 * n2_6 * (n3 * n3) + -94.3359375 * (n1 * n1) * (n2 * n2) * n3_12 + -135.92578125 * n1_10 * n2_4 * (n3 * n3) + -135.92578125 * (n1 * n1) * n2_10 * n3_4 + 709.734375 * n1_6 * n2_4 * n3_6 + 42.65625 * n1_6 * n2_8 * (n3 * n3) + 42.65625 * n1_6 * (n2 * n2) * n3_8 + -135.92578125 * n1_4 * n2_10 * (n3 * n3) + 221.89453125 * n1_4 * n2_4 * n3_8 + 221.89453125 * n1_8 * n2_4 * n3_4 + 709.734375 * n1_6 * n2_6 * n3_4 + 709.734375 * n1_4 * n2_6 * n3_6 + -135.92578125 * n1_4 * (n2 * n2) * n3_10 + -135.92578125 * n1_10 * (n2 * n2) * n3_4 + 42.65625 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + 1 / (12.566370614359172 * n * 1);
}

void mehr_4f_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  G[0] = (0.052083333333333336 * n1_8 + 0.052083333333333336 * n2_8 + 0.052083333333333336 * n3_8 + 0.16666666666666666 * n1_4 * n2_4 + 0.13541666666666666 * n1_6 * (n2 * n2) + 0.13541666666666666 * (n1 * n1) * n2_6 + 0.13541666666666666 * n1_6 * (n3 * n3) + 0.13541666666666666 * n2_6 * (n3 * n3) + 0.13541666666666666 * (n1 * n1) * n3_6 + 0.13541666666666666 * (n2 * n2) * n3_6 + 0.16666666666666666 * n1_4 * n3_4 + 0.16666666666666666 * n2_4 * n3_4 + -3.6770833333333335 * n1_4 * (n2 * n2) * (n3 * n3) + -3.6770833333333335 * (n1 * n1) * n2_4 * (n3 * n3) + -3.6770833333333335 * (n1 * n1) * (n2 * n2) * n3_4) / (M_PI * pow(n, 13)) + (0.09114583333333333 * n1_12 + 0.09114583333333333 * n2_12 + 0.09114583333333333 * n3_12 + -1.0546875 * (n1 * n1) * n2_10 + 3.3854166666666665 * n1_6 * n2_6 + 0.546875 * n1_4 * n2_8 + 3.3854166666666665 * n1_6 * n3_6 + -1.0546875 * (n1 * n1) * n3_10 + 0.546875 * n1_8 * n2_4 + 0.546875 * n1_8 * n3_4 + -1.0546875 * n1_10 * (n2 * n2) + 0.546875 * n1_4 * n3_8 + 0.546875 * n2_4 * n3_8 + 0.546875 * n2_8 * n3_4 + -1.0546875 * n1_10 * (n3 * n3) + 3.3854166666666665 * n2_6 * n3_6 + -1.0546875 * n2_10 * (n3 * n3) + -1.0546875 * (n2 * n2) * n3_10 + 3.3203125 * n1_6 * n2_4 * (n3 * n3) + -4.375 * n1_8 * (n2 * n2) * (n3 * n3) + 3.3203125 * n1_4 * (n2 * n2) * n3_6 + 3.3203125 * n1_6 * (n2 * n2) * n3_4 + 11.1328125 * n1_4 * n2_4 * n3_4 + 3.3203125 * n1_4 * n2_6 * (n3 * n3) + -4.375 * (n1 * n1) * (n2 * n2) * n3_8 + 3.3203125 * (n1 * n1) * n2_6 * n3_4 + 3.3203125 * (n1 * n1) * n2_4 * n3_6 + -4.375 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (0.205078125 * n1_16 + 0.205078125 * n2_16 + 0.205078125 * n3_16 + 147.73828125 * n1_10 * n2_6 + -6.48046875 * (n1 * n1) * n2_14 + 239.0390625 * n1_8 * n2_8 + 21.533203125 * n1_4 * n2_12 + 21.533203125 * n1_12 * n3_4 + 239.0390625 * n2_8 * n3_8 + 147.73828125 * n1_6 * n3_10 + 239.0390625 * n1_8 * n3_8 + -6.48046875 * n1_14 * (n3 * n3) + 21.533203125 * n1_12 * n2_4 + 147.73828125 * n2_10 * n3_6 + 147.73828125 * n2_6 * n3_10 + -6.48046875 * (n1 * n1) * n3_14 + 21.533203125 * n1_4 * n3_12 + 21.533203125 * n2_4 * n3_12 + -6.48046875 * (n2 * n2) * n3_14 + 147.73828125 * n1_6 * n2_10 + 147.73828125 * n1_10 * n3_6 + -6.48046875 * n1_14 * (n2 * n2) + 21.533203125 * n2_12 * n3_4 + -6.48046875 * n2_14 * (n3 * n3) + -6133.55859375 * (n1 * n1) * n2_8 * n3_6 + 363.3984375 * (n1 * n1) * n2_12 * (n3 * n3) + 363.3984375 * n1_12 * (n2 * n2) * (n3 * n3) + -1423.734375 * (n1 * n1) * n2_4 * n3_10 + 6463.447265625 * n1_4 * n2_8 * n3_4 + -6133.55859375 * n1_8 * (n2 * n2) * n3_6 + -6133.55859375 * n1_8 * n2_6 * (n3 * n3) + 363.3984375 * (n1 * n1) * (n2 * n2) * n3_12 + -1423.734375 * n1_10 * n2_4 * (n3 * n3) + -1423.734375 * (n1 * n1) * n2_10 * n3_4 + 15817.4296875 * n1_6 * n2_4 * n3_6 + -6133.55859375 * n1_6 * n2_8 * (n3 * n3) + -6133.55859375 * n1_6 * (n2 * n2) * n3_8 + -1423.734375 * n1_4 * n2_10 * (n3 * n3) + 6463.447265625 * n1_4 * n2_4 * n3_8 + 6463.447265625 * n1_8 * n2_4 * n3_4 + 15817.4296875 * n1_6 * n2_6 * n3_4 + 15817.4296875 * n1_4 * n2_6 * n3_6 + -1423.734375 * n1_4 * (n2 * n2) * n3_10 + -1423.734375 * n1_10 * (n2 * n2) * n3_4 + -6133.55859375 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + 1 / (12.566370614359172 * n * 1);
}

void mehr_6f_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  G[0] = (-0.018229166666666668 * n1_12 + -0.018229166666666668 * n2_12 + -0.018229166666666668 * n3_12 + -0.5625 * (n1 * n1) * n2_10 + 8.088541666666666 * n1_6 * n2_6 + 3.5 * n1_4 * n2_8 + 8.088541666666666 * n1_6 * n3_6 + -0.5625 * (n1 * n1) * n3_10 + 3.5 * n1_8 * n2_4 + 3.5 * n1_8 * n3_4 + -0.5625 * n1_10 * (n2 * n2) + 3.5 * n1_4 * n3_8 + -0.5625 * n1_10 * (n3 * n3) + 3.5 * n2_4 * n3_8 + 3.5 * n2_8 * n3_4 + 8.088541666666666 * n2_6 * n3_6 + -0.5625 * n2_10 * (n3 * n3) + -0.5625 * (n2 * n2) * n3_10 + -15.875 * n1_6 * n2_4 * (n3 * n3) + -9.953125 * n1_8 * (n2 * n2) * (n3 * n3) + -15.875 * n1_4 * (n2 * n2) * n3_6 + -15.875 * n1_6 * (n2 * n2) * n3_4 + -33.1640625 * n1_4 * n2_4 * n3_4 + -15.875 * n1_4 * n2_6 * (n3 * n3) + -9.953125 * (n1 * n1) * (n2 * n2) * n3_8 + -15.875 * (n1 * n1) * n2_6 * n3_4 + -15.875 * (n1 * n1) * n2_4 * n3_6 + -9.953125 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (-0.67265625 * n1_16 + -0.67265625 * n2_16 + -0.67265625 * n3_16 + -27.74296875 * n1_10 * n2_6 + 7.79296875 * (n1 * n1) * n2_14 + -65.1328125 * n1_8 * n2_8 + 13.2890625 * n1_4 * n2_12 + 13.2890625 * n1_12 * n3_4 + -65.1328125 * n2_8 * n3_8 + -27.74296875 * n1_6 * n3_10 + -65.1328125 * n1_8 * n3_8 + 7.79296875 * n1_14 * (n3 * n3) + 13.2890625 * n1_12 * n2_4 + -27.74296875 * n2_10 * n3_6 + -27.74296875 * n2_6 * n3_10 + 7.79296875 * (n1 * n1) * n3_14 + 13.2890625 * n1_4 * n3_12 + 13.2890625 * n2_4 * n3_12 + 7.79296875 * (n2 * n2) * n3_14 + -27.74296875 * n1_6 * n2_10 + -27.74296875 * n1_10 * n3_6 + 7.79296875 * n1_14 * (n2 * n2) + 13.2890625 * n2_12 * n3_4 + 7.79296875 * n2_14 * (n3 * n3) + -98.109375 * (n1 * n1) * n2_8 * n3_6 + 13.9453125 * (n1 * n1) * n2_12 * (n3 * n3) + 13.9453125 * n1_12 * (n2 * n2) * (n3 * n3) + -27.64453125 * (n1 * n1) * n2_4 * n3_10 + 86.54296875 * n1_4 * n2_8 * n3_4 + -98.109375 * n1_8 * (n2 * n2) * n3_6 + -98.109375 * n1_8 * n2_6 * (n3 * n3) + 13.9453125 * (n1 * n1) * (n2 * n2) * n3_12 + -27.64453125 * n1_10 * n2_4 * (n3 * n3) + -27.64453125 * (n1 * n1) * n2_10 * n3_4 + 254.953125 * n1_6 * n2_4 * n3_6 + -98.109375 * n1_6 * n2_8 * (n3 * n3) + -98.109375 * n1_6 * (n2 * n2) * n3_8 + -27.64453125 * n1_4 * n2_10 * (n3 * n3) + 86.54296875 * n1_4 * n2_4 * n3_8 + 86.54296875 * n1_8 * n2_4 * n3_4 + 254.953125 * n1_6 * n2_6 * n3_4 + 254.953125 * n1_4 * n2_6 * n3_6 + -27.64453125 * n1_4 * (n2 * n2) * n3_10 + -27.64453125 * n1_10 * (n2 * n2) * n3_4 + -98.109375 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + 1 / (12.566370614359172 * n * 1);
}

#endif