#ifndef LGF_3UNB0SPE_HPP_
#define LGF_3UNB0SPE_HPP_

#include <math.h>

void lgf_2_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  G[0] = (0.0625 * n1_4 + 0.0625 * n2_4 + 0.0625 * n3_4 + -0.1875 * (n1 * n1) * (n2 * n2) + -0.1875 * (n1 * n1) * (n3 * n3) + -0.1875 * (n2 * n2) * (n3 * n3)) / (M_PI * pow(n, 7)) + (0.1796875 * n1_8 + 0.1796875 * n2_8 + 0.1796875 * n3_8 + -1.90625 * (n1 * n1) * n2_6 + -1.90625 * (n1 * n1) * n3_6 + 4.8515625 * n1_4 * n2_4 + 4.8515625 * n1_4 * n3_4 + -1.90625 * n1_6 * (n2 * n2) + -1.90625 * n1_6 * (n3 * n3) + -1.90625 * (n2 * n2) * n3_6 + -1.90625 * n2_6 * (n3 * n3) + 4.8515625 * n2_4 * n3_4 + -1.78125 * n1_4 * (n2 * n2) * (n3 * n3) + -1.78125 * (n1 * n1) * (n2 * n2) * n3_4 + -1.78125 * (n1 * n1) * n2_4 * (n3 * n3)) / (M_PI * pow(n, 13)) + (1.263671875 * n1_12 + 1.263671875 * n2_12 + 1.263671875 * n3_12 + 208.078125 * n1_4 * n2_8 + -32.068359375 * (n1 * n1) * n2_10 + -32.068359375 * n1_10 * (n3 * n3) + 208.078125 * n1_4 * n3_8 + 208.078125 * n1_8 * n2_4 + -32.068359375 * n1_10 * (n2 * n2) + 208.078125 * n2_4 * n3_8 + -32.068359375 * (n1 * n1) * n3_10 + -32.068359375 * n2_10 * (n3 * n3) + -348.087890625 * n1_6 * n2_6 + -348.087890625 * n1_6 * n3_6 + 208.078125 * n1_8 * n3_4 + -348.087890625 * n2_6 * n3_6 + -32.068359375 * (n2 * n2) * n3_10 + 208.078125 * n2_8 * n3_4 + -30.708984375 * n1_8 * (n2 * n2) * (n3 * n3) + -30.708984375 * (n1 * n1) * n2_8 * (n3 * n3) + -145.447265625 * (n1 * n1) * n2_6 * n3_4 + -145.447265625 * n1_4 * (n2 * n2) * n3_6 + -145.447265625 * n1_6 * (n2 * n2) * n3_4 + -145.447265625 * n1_4 * n2_6 * (n3 * n3) + -145.447265625 * (n1 * n1) * n2_4 * n3_6 + -145.447265625 * n1_6 * n2_4 * (n3 * n3) + -30.708984375 * (n1 * n1) * (n2 * n2) * n3_8 + 1224.287109375 * n1_4 * n2_4 * n3_4) / (M_PI * pow(n, 19)) + (17.6351318359375 * n1_16 + 17.6351318359375 * n2_16 + 17.6351318359375 * n3_16 + -38587.1455078125 * n1_6 * n2_10 + 59374.79406738281 * n1_8 * n2_8 + 59374.79406738281 * n1_8 * n3_8 + 10319.976806640625 * n1_12 * n3_4 + -817.4765625 * n1_14 * (n3 * n3) + -817.4765625 * (n2 * n2) * n3_14 + 10319.976806640625 * n2_4 * n3_12 + -38587.1455078125 * n1_10 * n2_6 + -38587.1455078125 * n1_10 * n3_6 + -817.4765625 * n1_14 * (n2 * n2) + -38587.1455078125 * n2_6 * n3_10 + -817.4765625 * n2_14 * (n3 * n3) + 10319.976806640625 * n1_12 * n2_4 + 10319.976806640625 * n1_4 * n2_12 + -817.4765625 * (n1 * n1) * n2_14 + 10319.976806640625 * n2_12 * n3_4 + 59374.79406738281 * n2_8 * n3_8 + 10319.976806640625 * n1_4 * n3_12 + -817.4765625 * (n1 * n1) * n3_14 + -38587.1455078125 * n2_10 * n3_6 + -38587.1455078125 * n1_6 * n3_10 + 176752.265625 * n1_4 * n2_4 * n3_8 + -10707.0205078125 * n1_6 * n2_8 * (n3 * n3) + -10707.0205078125 * (n1 * n1) * n2_6 * n3_8 + -1029.375 * (n1 * n1) * (n2 * n2) * n3_12 + -7662.298828125 * (n1 * n1) * n2_10 * n3_4 + -10707.0205078125 * n1_8 * (n2 * n2) * n3_6 + -7662.298828125 * n1_4 * (n2 * n2) * n3_10 + -145606.125 * n1_6 * n2_4 * n3_6 + 176752.265625 * n1_4 * n2_8 * n3_4 + -145606.125 * n1_6 * n2_6 * n3_4 + -10707.0205078125 * (n1 * n1) * n2_8 * n3_6 + -7662.298828125 * n1_10 * n2_4 * (n3 * n3) + -7662.298828125 * n1_10 * (n2 * n2) * n3_4 + -1029.375 * (n1 * n1) * n2_12 * (n3 * n3) + -145606.125 * n1_4 * n2_6 * n3_6 + -7662.298828125 * n1_4 * n2_10 * (n3 * n3) + -7662.298828125 * (n1 * n1) * n2_4 * n3_10 + -10707.0205078125 * n1_8 * n2_6 * (n3 * n3) + -1029.375 * n1_12 * (n2 * n2) * (n3 * n3) + 176752.265625 * n1_8 * n2_4 * n3_4 + -10707.0205078125 * n1_6 * (n2 * n2) * n3_8) / (M_PI * pow(n, 25)) + 1 / (12.566370614359172 * n * 1);
}

void lgf_4_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  G[0] = (0.125 * n1_8 + 0.125 * n2_8 + 0.125 * n3_8 + 0.0625 * (n1 * n1) * n2_6 + 0.0625 * (n1 * n1) * n3_6 + -0.125 * n1_4 * n2_4 + -0.125 * n1_4 * n3_4 + 0.0625 * n1_6 * (n2 * n2) + 0.0625 * n1_6 * (n3 * n3) + 0.0625 * (n2 * n2) * n3_6 + 0.0625 * n2_6 * (n3 * n3) + -0.125 * n2_4 * n3_4 + -4.625 * n1_4 * (n2 * n2) * (n3 * n3) + -4.625 * (n1 * n1) * (n2 * n2) * n3_4 + -4.625 * (n1 * n1) * n2_4 * (n3 * n3)) / (M_PI * pow(n, 13)) + (-0.390625 * n1_12 + -0.390625 * n2_12 + -0.390625 * n3_12 + -7.5 * n1_4 * n2_8 + 5.625 * (n1 * n1) * n2_10 + 5.625 * n1_10 * (n3 * n3) + -7.5 * n1_4 * n3_8 + -7.5 * n1_8 * n2_4 + 5.625 * n1_10 * (n2 * n2) + -7.5 * n2_4 * n3_8 + 5.625 * (n1 * n1) * n3_10 + 5.625 * n2_10 * (n3 * n3) + -27.03125 * n1_6 * n2_6 + -27.03125 * n1_6 * n3_6 + -7.5 * n1_8 * n3_4 + -27.03125 * n2_6 * n3_6 + 5.625 * (n2 * n2) * n3_10 + -7.5 * n2_8 * n3_4 + 34.21875 * n1_8 * (n2 * n2) * (n3 * n3) + 34.21875 * (n1 * n1) * n2_8 * (n3 * n3) + 7.5 * (n1 * n1) * n2_6 * n3_4 + 7.5 * n1_4 * (n2 * n2) * n3_6 + 7.5 * n1_6 * (n2 * n2) * n3_4 + 7.5 * n1_4 * n2_6 * (n3 * n3) + 7.5 * (n1 * n1) * n2_4 * n3_6 + 7.5 * n1_6 * n2_4 * (n3 * n3) + 34.21875 * (n1 * n1) * (n2 * n2) * n3_8 + -3.515625 * n1_4 * n2_4 * n3_4) / (M_PI * pow(n, 19)) + (5.0859375 * n1_16 + 5.0859375 * n2_16 + 5.0859375 * n3_16 + 484.23046875 * n1_6 * n2_10 + 801.7734375 * n1_8 * n2_8 + 801.7734375 * n1_8 * n3_8 + 60.29296875 * n1_12 * n3_4 + -17.96484375 * n1_14 * (n3 * n3) + -17.96484375 * (n2 * n2) * n3_14 + 60.29296875 * n2_4 * n3_12 + 484.23046875 * n1_10 * n2_6 + 484.23046875 * n1_10 * n3_6 + -17.96484375 * n1_14 * (n2 * n2) + 484.23046875 * n2_6 * n3_10 + -17.96484375 * n2_14 * (n3 * n3) + 60.29296875 * n1_12 * n2_4 + 60.29296875 * n1_4 * n2_12 + -17.96484375 * (n1 * n1) * n2_14 + 60.29296875 * n2_12 * n3_4 + 801.7734375 * n2_8 * n3_8 + 60.29296875 * n1_4 * n3_12 + -17.96484375 * (n1 * n1) * n3_14 + 484.23046875 * n2_10 * n3_6 + 484.23046875 * n1_6 * n3_10 + 13045.4296875 * n1_4 * n2_4 * n3_8 + -5872.2890625 * n1_6 * n2_8 * (n3 * n3) + -5872.2890625 * (n1 * n1) * n2_6 * n3_8 + -1990.8984375 * (n1 * n1) * (n2 * n2) * n3_12 + -5233.67578125 * (n1 * n1) * n2_10 * n3_4 + -5872.2890625 * n1_8 * (n2 * n2) * n3_6 + -5233.67578125 * n1_4 * (n2 * n2) * n3_10 + 36678.796875 * n1_6 * n2_4 * n3_6 + 13045.4296875 * n1_4 * n2_8 * n3_4 + 36678.796875 * n1_6 * n2_6 * n3_4 + -5872.2890625 * (n1 * n1) * n2_8 * n3_6 + -5233.67578125 * n1_10 * n2_4 * (n3 * n3) + -5233.67578125 * n1_10 * (n2 * n2) * n3_4 + -1990.8984375 * (n1 * n1) * n2_12 * (n3 * n3) + 36678.796875 * n1_4 * n2_6 * n3_6 + -5233.67578125 * n1_4 * n2_10 * (n3 * n3) + -5233.67578125 * (n1 * n1) * n2_4 * n3_10 + -5872.2890625 * n1_8 * n2_6 * (n3 * n3) + -1990.8984375 * n1_12 * (n2 * n2) * (n3 * n3) + 13045.4296875 * n1_8 * n2_4 * n3_4 + -5872.2890625 * n1_6 * (n2 * n2) * n3_8) / (M_PI * pow(n, 25)) + 1 / (12.566370614359172 * n * 1);
}

void lgf_6_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  G[0] = (0.703125 * n1_12 + 0.703125 * n2_12 + 0.703125 * n3_12 + 13.5 * n1_4 * n2_8 + -10.125 * (n1 * n1) * n2_10 + -10.125 * n1_10 * (n3 * n3) + 13.5 * n1_4 * n3_8 + 13.5 * n1_8 * n2_4 + -10.125 * n1_10 * (n2 * n2) + 13.5 * n2_4 * n3_8 + -10.125 * (n1 * n1) * n3_10 + -10.125 * n2_10 * (n3 * n3) + 48.65625 * n1_6 * n2_6 + 48.65625 * n1_6 * n3_6 + 13.5 * n1_8 * n3_4 + 48.65625 * n2_6 * n3_6 + -10.125 * (n2 * n2) * n3_10 + 13.5 * n2_8 * n3_4 + -61.59375 * n1_8 * (n2 * n2) * (n3 * n3) + -61.59375 * (n1 * n1) * n2_8 * (n3 * n3) + -13.5 * (n1 * n1) * n2_6 * n3_4 + -13.5 * n1_4 * (n2 * n2) * n3_6 + -13.5 * n1_6 * (n2 * n2) * n3_4 + -13.5 * n1_4 * n2_6 * (n3 * n3) + -13.5 * (n1 * n1) * n2_4 * n3_6 + -13.5 * n1_6 * n2_4 * (n3 * n3) + -61.59375 * (n1 * n1) * (n2 * n2) * n3_8 + 6.328125 * n1_4 * n2_4 * n3_4) / (M_PI * pow(n, 19)) + (-6.890625 * n1_16 + -6.890625 * n2_16 + -6.890625 * n3_16 + -412.9453125 * n1_6 * n2_10 + -753.046875 * n1_8 * n2_8 + -753.046875 * n1_8 * n3_8 + 7.3828125 * n1_12 * n3_4 + 36.9140625 * n1_14 * (n3 * n3) + 36.9140625 * (n2 * n2) * n3_14 + 7.3828125 * n2_4 * n3_12 + -412.9453125 * n1_10 * n2_6 + -412.9453125 * n1_10 * n3_6 + 36.9140625 * n1_14 * (n2 * n2) + 7.3828125 * n1_12 * n2_4 + 7.3828125 * n1_4 * n2_12 + -412.9453125 * n2_6 * n3_10 + 36.9140625 * n2_14 * (n3 * n3) + 7.3828125 * n2_12 * n3_4 + -753.046875 * n2_8 * n3_8 + 7.3828125 * n1_4 * n3_12 + 36.9140625 * (n1 * n1) * n2_14 + 36.9140625 * (n1 * n1) * n3_14 + -412.9453125 * n2_10 * n3_6 + -412.9453125 * n1_6 * n3_10 + -5980.078125 * n1_4 * n2_4 * n3_8 + -575.859375 * n1_6 * n2_8 * (n3 * n3) + -575.859375 * (n1 * n1) * n2_6 * n3_8 + 2288.671875 * (n1 * n1) * (n2 * n2) * n3_12 + 3536.3671875 * (n1 * n1) * n2_10 * n3_4 + -575.859375 * n1_8 * (n2 * n2) * n3_6 + 3536.3671875 * n1_4 * (n2 * n2) * n3_10 + -19018.125 * n1_6 * n2_4 * n3_6 + -5980.078125 * n1_4 * n2_8 * n3_4 + -19018.125 * n1_6 * n2_6 * n3_4 + -575.859375 * (n1 * n1) * n2_8 * n3_6 + 3536.3671875 * n1_10 * n2_4 * (n3 * n3) + 3536.3671875 * n1_10 * (n2 * n2) * n3_4 + 2288.671875 * (n1 * n1) * n2_12 * (n3 * n3) + -19018.125 * n1_4 * n2_6 * n3_6 + 3536.3671875 * n1_4 * n2_10 * (n3 * n3) + 3536.3671875 * (n1 * n1) * n2_4 * n3_10 + -575.859375 * n1_8 * n2_6 * (n3 * n3) + 2288.671875 * n1_12 * (n2 * n2) * (n3 * n3) + -5980.078125 * n1_8 * n2_4 * n3_4 + -575.859375 * n1_6 * (n2 * n2) * n3_8) / (M_PI * pow(n, 25)) + 1 / (12.566370614359172 * n * 1);
}

void lgf_2_2unb0spe_expansion(double* G, const double n1, const double n2, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n1_22 = pow(n1, 22);
  const double n1_24 = pow(n1, 24);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n2_22 = pow(n2, 22);
  const double n2_24 = pow(n2, 24);
  G[0] = -0.2573434264136427 + (0.041666666666666664 * n1_4 + 0.041666666666666664 * n2_4 + -0.25 * (n1 * n1) * (n2 * n2)) / (M_PI * pow(n, 6)) + (0.08958333333333333 * n1_8 + 0.08958333333333333 * n2_8 + 3.2708333333333335 * n1_4 * n2_4 + -1.6083333333333334 * n1_6 * (n2 * n2) + -1.6083333333333334 * (n1 * n1) * n2_6) / (M_PI * pow(n, 12)) + (0.470734126984127 * n1_12 + 0.470734126984127 * n2_12 + -205.45833333333334 * n1_6 * n2_6 + -21.961309523809526 * (n1 * n1) * n2_10 + 123.72767857142857 * n1_4 * n2_8 + 123.72767857142857 * n1_8 * n2_4 + -21.961309523809526 * n1_10 * (n2 * n2)) / (M_PI * pow(n, 18)) + (5.658072916666667 * n1_16 + 5.658072916666667 * n2_16 + -20042.297916666666 * n1_10 * n2_6 + 5573.392708333334 * n1_12 * n2_4 + 5573.392708333334 * n1_4 * n2_12 + -488.91875 * n1_14 * (n2 * n2) + -20042.297916666666 * n1_6 * n2_10 + 29912.7984375 * n1_8 * n2_8 + -488.91875 * (n1 * n1) * n2_14) / (M_PI * pow(n, 24)) + (118.71472537878788 * n1_20 + 118.71472537878788 * n2_20 + 318040.3899147727 * n1_4 * n2_16 + -16520.104640151516 * (n1 * n1) * n2_18 + 5.661116592329546e6 * n1_12 * n2_8 + -7.875366552083333e6 * n1_10 * n2_10 + -2.0251342556818181e6 * n1_14 * n2_6 + 318040.3899147727 * n1_16 * n2_4 + -16520.104640151516 * n1_18 * (n2 * n2) + -2.0251342556818181e6 * n1_6 * n2_14 + 5.661116592329546e6 * n1_8 * n2_12) / (M_PI * pow(n, 30)) + (3869.1750004769538 * n1_24 + 3869.1750004769538 * n2_24 + 2.3115322356304374e7 * n1_20 * n2_4 + -791303.8594036172 * n1_22 * (n2 * n2) + 1.0466324775862252e9 * n1_8 * n2_16 + 1.0466324775862252e9 * n1_16 * n2_8 + 2.3115322356304374e7 * n1_4 * n2_20 + -2.4791855919935327e9 * n1_10 * n2_14 + 3.2817360878718996e9 * n1_12 * n2_12 + -791303.8594036172 * (n1 * n1) * n2_22 + -2.4791855919935327e9 * n1_14 * n2_10 + -2.3064143553802848e8 * n1_6 * n2_18 + -2.3064143553802848e8 * n1_18 * n2_6) / (M_PI * pow(n, 36)) + -0.15915494309189535 * log(n);
}

void lgf_4_2unb0spe_expansion(double* G, const double n1, const double n2, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n1_22 = pow(n1, 22);
  const double n1_24 = pow(n1, 24);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n2_22 = pow(n2, 22);
  const double n2_24 = pow(n2, 24);
  G[0] = -0.2573434264136427 + (0.1 * n1_8 + 0.1 * n2_8 + -1.0 * n1_4 * n2_4 + -0.4 * n1_6 * (n2 * n2) + -0.4 * (n1 * n1) * n2_6) / (M_PI * pow(n, 12)) + (-0.17857142857142858 * n1_12 + -0.17857142857142858 * n2_12 + -15.0 * n1_6 * n2_6 + 4.642857142857143 * (n1 * n1) * n2_10 + -2.6785714285714284 * n1_4 * n2_8 + -2.6785714285714284 * n1_8 * n2_4 + 4.642857142857143 * n1_10 * (n2 * n2)) / (M_PI * pow(n, 18)) + (3.3833333333333333 * n1_16 + 3.3833333333333333 * n2_16 + 297.73333333333335 * n1_10 * n2_6 + -121.8 * n1_12 * n2_4 + -121.8 * n1_4 * n2_12 + -81.2 * n1_14 * (n2 * n2) + 297.73333333333335 * n1_6 * n2_10 + 669.9 * n1_8 * n2_8 + -81.2 * (n1 * n1) * n2_14) / (M_PI * pow(n, 24)) + (-61.28787878787879 * n1_20 + -61.28787878787879 * n2_20 + -14525.227272727272 * n1_4 * n2_16 + 3799.848484848485 * (n1 * n1) * n2_18 + 30276.21212121212 * n1_12 * n2_8 + 105170.0 * n1_10 * n2_10 + -40695.15151515151 * n1_14 * n2_6 + -14525.227272727272 * n1_16 * n2_4 + 3799.848484848485 * n1_18 * (n2 * n2) + -40695.15151515151 * n1_6 * n2_14 + 30276.21212121212 * n1_8 * n2_12) / (M_PI * pow(n, 30)) + (1709.6075091575092 * n1_24 + 1709.6075091575092 * n2_24 + 666795.256043956 * n1_20 * n2_4 + -124026.45054945054 * n1_22 * (n2 * n2) + -1.9196960719780219e6 * n1_8 * n2_16 + -1.9196960719780219e6 * n1_16 * n2_8 + 666795.256043956 * n1_4 * n2_20 + -1.7164421758241758e6 * n1_10 * n2_14 + 570020.5238095238 * n1_12 * n2_12 + -124026.45054945054 * (n1 * n1) * n2_22 + -1.7164421758241758e6 * n1_14 * n2_10 + 874287.6798534798 * n1_6 * n2_18 + 874287.6798534798 * n1_18 * n2_6) / (M_PI * pow(n, 36)) + -0.15915494309189535 * log(n);
}

void lgf_6_2unb0spe_expansion(double* G, const double n1, const double n2, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n1_22 = pow(n1, 22);
  const double n1_24 = pow(n1, 24);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n2_22 = pow(n2, 22);
  const double n2_24 = pow(n2, 24);
  G[0] = -0.2573434264136427 + (0.32142857142857145 * n1_12 + 0.32142857142857145 * n2_12 + 27.0 * n1_6 * n2_6 + -8.357142857142858 * (n1 * n1) * n2_10 + 4.821428571428571 * n1_4 * n2_8 + 4.821428571428571 * n1_8 * n2_4 + -8.357142857142858 * n1_10 * (n2 * n2)) / (M_PI * pow(n, 18)) + (-3.5 * n1_16 + -3.5 * n2_16 + -308.0 * n1_10 * n2_6 + 126.0 * n1_12 * n2_4 + 126.0 * n1_4 * n2_12 + 84.0 * n1_14 * (n2 * n2) + -308.0 * n1_6 * n2_10 + -693.0 * n1_8 * n2_8 + 84.0 * (n1 * n1) * n2_14) / (M_PI * pow(n, 24)) + (20.045454545454547 * n1_20 + 20.045454545454547 * n2_20 + 4750.772727272727 * n1_4 * n2_16 + -1242.8181818181818 * (n1 * n1) * n2_18 + -9902.454545454546 * n1_12 * n2_8 + -34398.0 * n1_10 * n2_10 + 13310.181818181818 * n1_14 * n2_6 + 4750.772727272727 * n1_16 * n2_4 + -1242.8181818181818 * n1_18 * (n2 * n2) + 13310.181818181818 * n1_6 * n2_14 + -9902.454545454546 * n1_8 * n2_12) / (M_PI * pow(n, 30)) + (1969.5741758241759 * n1_24 + 1969.5741758241759 * n2_24 + 1.753487456043956e6 * n1_20 * n2_4 + -187672.45054945056 * n1_22 * (n2 * n2) + -1.0042807771978023e7 * n1_8 * n2_16 + -1.0042807771978023e7 * n1_16 * n2_8 + 1.753487456043956e6 * n1_4 * n2_20 + 1.7206178241758242e6 * n1_10 * n2_14 + 1.762429585714286e7 * n1_12 * n2_12 + -187672.45054945056 * (n1 * n1) * n2_22 + 1.7206178241758242e6 * n1_14 * n2_10 + -1.0081481868131869e6 * n1_6 * n2_18 + -1.0081481868131869e6 * n1_18 * n2_6) / (M_PI * pow(n, 36)) + -0.15915494309189535 * log(n);
}

void mehr_4_3unb0spe_expansion(double* G, const double n1, const double n2, const double n3, const double n) {
  const double n1_4 = pow(n1, 4);
  const double n1_6 = pow(n1, 6);
  const double n1_8 = pow(n1, 8);
  const double n1_10 = pow(n1, 10);
  const double n1_12 = pow(n1, 12);
  const double n1_14 = pow(n1, 14);
  const double n1_16 = pow(n1, 16);
  const double n1_18 = pow(n1, 18);
  const double n1_20 = pow(n1, 20);
  const double n2_4 = pow(n2, 4);
  const double n2_6 = pow(n2, 6);
  const double n2_8 = pow(n2, 8);
  const double n2_10 = pow(n2, 10);
  const double n2_12 = pow(n2, 12);
  const double n2_14 = pow(n2, 14);
  const double n2_16 = pow(n2, 16);
  const double n2_18 = pow(n2, 18);
  const double n2_20 = pow(n2, 20);
  const double n3_4 = pow(n3, 4);
  const double n3_6 = pow(n3, 6);
  const double n3_8 = pow(n3, 8);
  const double n3_10 = pow(n3, 10);
  const double n3_12 = pow(n3, 12);
  const double n3_14 = pow(n3, 14);
  const double n3_16 = pow(n3, 16);
  const double n3_18 = pow(n3, 18);
  const double n3_20 = pow(n3, 20);
  G[0] = (-0.020833333333333332 * n1_8 + -0.020833333333333332 * n2_8 + -0.020833333333333332 * n3_8 + 0.4583333333333333 * n1_4 * n2_4 + 0.20833333333333334 * n1_6 * (n2 * n2) + 0.20833333333333334 * (n1 * n1) * n2_6 + 0.20833333333333334 * n1_6 * (n3 * n3) + 0.20833333333333334 * n2_6 * (n3 * n3) + 0.20833333333333334 * (n1 * n1) * n3_6 + 0.20833333333333334 * (n2 * n2) * n3_6 + 0.4583333333333333 * n1_4 * n3_4 + 0.4583333333333333 * n2_4 * n3_4 + -2.7291666666666665 * n1_4 * (n2 * n2) * (n3 * n3) + -2.7291666666666665 * (n1 * n1) * n2_4 * (n3 * n3) + -2.7291666666666665 * (n1 * n1) * (n2 * n2) * n3_4) / (M_PI * pow(n, 13)) + (0.013020833333333334 * n1_12 + 0.013020833333333334 * n2_12 + 0.013020833333333334 * n3_12 + -0.703125 * (n1 * n1) * n2_10 + 6.744791666666667 * n1_6 * n2_6 + 2.65625 * n1_4 * n2_8 + 6.744791666666667 * n1_6 * n3_6 + -0.703125 * (n1 * n1) * n3_10 + 2.65625 * n1_8 * n2_4 + 2.65625 * n1_8 * n3_4 + -0.703125 * n1_10 * (n2 * n2) + 2.65625 * n1_4 * n3_8 + -0.703125 * n1_10 * (n3 * n3) + 2.65625 * n2_4 * n3_8 + 2.65625 * n2_8 * n3_4 + 6.744791666666667 * n2_6 * n3_6 + -0.703125 * n2_10 * (n3 * n3) + -0.703125 * (n2 * n2) * n3_10 + -10.390625 * n1_6 * n2_4 * (n3 * n3) + -8.359375 * n1_8 * (n2 * n2) * (n3 * n3) + -10.390625 * n1_4 * (n2 * n2) * n3_6 + -10.390625 * n1_6 * (n2 * n2) * n3_4 + -20.5078125 * n1_4 * n2_4 * n3_4 + -10.390625 * n1_4 * n2_6 * (n3 * n3) + -8.359375 * (n1 * n1) * (n2 * n2) * n3_8 + -10.390625 * (n1 * n1) * n2_6 * n3_4 + -10.390625 * (n1 * n1) * n2_4 * n3_6 + -8.359375 * (n1 * n1) * n2_8 * (n3 * n3)) / (M_PI * pow(n, 19)) + (1.06640625 * n1_16 + 1.06640625 * n2_16 + 1.06640625 * n3_16 + 155.3671875 * n1_10 * n2_6 + -25.7578125 * (n1 * n1) * n2_14 + 303.84375 * n1_8 * n2_8 + -23.37890625 * n1_4 * n2_12 + -23.37890625 * n1_12 * n3_4 + 303.84375 * n2_8 * n3_8 + 155.3671875 * n1_6 * n3_10 + 303.84375 * n1_8 * n3_8 + -23.37890625 * n1_12 * n2_4 + -25.7578125 * n1_14 * (n3 * n3) + 155.3671875 * n2_10 * n3_6 + 155.3671875 * n2_6 * n3_10 + -25.7578125 * (n1 * n1) * n3_14 + -23.37890625 * n2_4 * n3_12 + -25.7578125 * (n2 * n2) * n3_14 + -23.37890625 * n2_12 * n3_4 + -23.37890625 * n1_4 * n3_12 + 155.3671875 * n1_6 * n2_10 + 155.3671875 * n1_10 * n3_6 + -25.7578125 * n1_14 * (n2 * n2) + -25.7578125 * n2_14 * (n3 * n3) + -5914.9453125 * (n1 * n1) * n2_8 * n3_6 + 810.46875 * (n1 * n1) * n2_12 * (n3 * n3) + 810.46875 * n1_12 * (n2 * n2) * (n3 * n3) + -560.765625 * (n1 * n1) * n2_4 * n3_10 + 4864.86328125 * n1_4 * n2_8 * n3_4 + -5914.9453125 * n1_8 * (n2 * n2) * n3_6 + -5914.9453125 * n1_8 * n2_6 * (n3 * n3) + 810.46875 * (n1 * n1) * (n2 * n2) * n3_12 + -560.765625 * n1_10 * n2_4 * (n3 * n3) + -560.765625 * (n1 * n1) * n2_10 * n3_4 + 10804.5 * n1_6 * n2_4 * n3_6 + -5914.9453125 * n1_6 * n2_8 * (n3 * n3) + -5914.9453125 * n1_6 * (n2 * n2) * n3_8 + -560.765625 * n1_4 * n2_10 * (n3 * n3) + 4864.86328125 * n1_4 * n2_4 * n3_8 + 4864.86328125 * n1_8 * n2_4 * n3_4 + 10804.5 * n1_6 * n2_6 * n3_4 + 10804.5 * n1_4 * n2_6 * n3_6 + -560.765625 * n1_4 * (n2 * n2) * n3_10 + -560.765625 * n1_10 * (n2 * n2) * n3_4 + -5914.9453125 * (n1 * n1) * n2_6 * n3_8) / (M_PI * pow(n, 25)) + (3.6637369791666665 * n1_20 + 3.6637369791666665 * n2_20 + 3.6637369791666665 * n3_20 + 64.20572916666667 * n1_14 * n2_6 + -19.010416666666668 * n1_18 * (n2 * n2) + -633.3601888020834 * n1_4 * n2_16 + 64.20572916666667 * n1_6 * n2_14 + -633.3601888020834 * n1_16 * n3_4 + -633.3601888020834 * n2_16 * n3_4 + 9772.825520833334 * n1_10 * n3_10 + -633.3601888020834 * n2_4 * n3_16 + 9772.825520833334 * n2_10 * n3_10 + 5561.304524739583 * n2_12 * n3_8 + 5561.304524739583 * n1_8 * n3_12 + -19.010416666666668 * (n1 * n1) * n3_18 + 64.20572916666667 * n2_6 * n3_14 + 64.20572916666667 * n2_14 * n3_6 + 5561.304524739583 * n1_12 * n2_8 + 5561.304524739583 * n1_12 * n3_8 + 5561.304524739583 * n2_8 * n3_12 + -19.010416666666668 * (n2 * n2) * n3_18 + 9772.825520833334 * n1_10 * n2_10 + -633.3601888020834 * n1_16 * n2_4 + -19.010416666666668 * (n1 * n1) * n2_18 + 64.20572916666667 * n1_6 * n3_14 + -633.3601888020834 * n1_4 * n3_16 + 64.20572916666667 * n1_14 * n3_6 + 5561.304524739583 * n1_8 * n2_12 + -19.010416666666668 * n1_18 * (n3 * n3) + -19.010416666666668 * n2_18 * (n3 * n3) + -249823.86393229166 * n1_10 * n2_8 * (n3 * n3) + 110000.52734375 * n1_8 * n2_6 * n3_6 + 20828.466796875 * n1_14 * n2_4 * (n3 * n3) + -4497.486979166667 * (n1 * n1) * (n2 * n2) * n3_16 + 110000.52734375 * n1_6 * n2_6 * n3_8 + 110000.52734375 * n1_6 * n2_8 * n3_6 + 186440.85611979166 * n1_10 * n2_6 * n3_4 + -4497.486979166667 * n1_16 * (n2 * n2) * (n3 * n3) + 20828.466796875 * n1_4 * (n2 * n2) * n3_14 + -38123.404947916664 * n1_6 * (n2 * n2) * n3_12 + 20828.466796875 * (n1 * n1) * n2_4 * n3_14 + 20828.466796875 * (n1 * n1) * n2_14 * n3_4 + 254454.345703125 * n1_4 * n2_4 * n3_12 + 254454.345703125 * n1_12 * n2_4 * n3_4 + -38123.404947916664 * (n1 * n1) * n2_12 * n3_6 + -38123.404947916664 * n1_12 * n2_6 * (n3 * n3) + -249823.86393229166 * n1_8 * n2_10 * (n3 * n3) + -249823.86393229166 * (n1 * n1) * n2_10 * n3_8 + 186440.85611979166 * n1_4 * n2_10 * n3_6 + -38123.404947916664 * n1_12 * (n2 * n2) * n3_6 + -249823.86393229166 * (n1 * n1) * n2_8 * n3_10 + 186440.85611979166 * n1_6 * n2_10 * n3_4 + 20828.466796875 * n1_14 * (n2 * n2) * n3_4 + -93103.3251953125 * n1_4 * n2_8 * n3_8 + -4497.486979166667 * (n1 * n1) * n2_16 * (n3 * n3) + -93103.3251953125 * n1_8 * n2_4 * n3_8 + -249823.86393229166 * n1_10 * (n2 * n2) * n3_8 + 186440.85611979166 * n1_10 * n2_4 * n3_6 + -249823.86393229166 * n1_8 * (n2 * n2) * n3_10 + -93103.3251953125 * n1_8 * n2_8 * n3_4 + 186440.85611979166 * n1_6 * n2_4 * n3_10 + 20828.466796875 * n1_4 * n2_14 * (n3 * n3) + 186440.85611979166 * n1_4 * n2_6 * n3_10 + 254454.345703125 * n1_4 * n2_12 * n3_4 + -38123.404947916664 * (n1 * n1) * n2_6 * n3_12 + -38123.404947916664 * n1_6 * n2_12 * (n3 * n3)) / (M_PI * pow(n, 31)) + 1 / (12.566370614359172 * n * 1);
}

#endif